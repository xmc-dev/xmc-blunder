// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/xmc-dev/xmc/account-srv/proto/role/role.proto

/*
Package role is a generated protocol buffer package.

It is generated from these files:
	github.com/xmc-dev/xmc/account-srv/proto/role/role.proto

It has these top-level messages:
	Role
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
*/
package role

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Scope string `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type CreateRequest struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadResponse struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadResponse) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type UpdateRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Scope string `protobuf:"bytes,3,opt,name=scope" json:"scope,omitempty"`
	NewId string `protobuf:"bytes,4,opt,name=new_id,json=newId" json:"new_id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *UpdateRequest) GetNewId() string {
	if m != nil {
		return m.NewId
	}
	return ""
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SearchRequest struct {
	Limit  uint32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Scope  string `protobuf:"bytes,5,opt,name=scope" json:"scope,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type SearchResponse struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResponse) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*Role)(nil), "xmc.srv.account.role.Role")
	proto.RegisterType((*CreateRequest)(nil), "xmc.srv.account.role.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "xmc.srv.account.role.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "xmc.srv.account.role.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "xmc.srv.account.role.ReadResponse")
	proto.RegisterType((*UpdateRequest)(nil), "xmc.srv.account.role.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "xmc.srv.account.role.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "xmc.srv.account.role.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "xmc.srv.account.role.DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "xmc.srv.account.role.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "xmc.srv.account.role.SearchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RoleService service

type RoleServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type roleServiceClient struct {
	c           client.Client
	serviceName string
}

func NewRoleServiceClient(serviceName string, c client.Client) RoleServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "xmc.srv.account.role"
	}
	return &roleServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *roleServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&RoleService{hdlr}, opts...))
}

type RoleService struct {
	RoleServiceHandler
}

func (h *RoleService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.RoleServiceHandler.Create(ctx, in, out)
}

func (h *RoleService) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.RoleServiceHandler.Read(ctx, in, out)
}

func (h *RoleService) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.RoleServiceHandler.Update(ctx, in, out)
}

func (h *RoleService) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.RoleServiceHandler.Delete(ctx, in, out)
}

func (h *RoleService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.RoleServiceHandler.Search(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/xmc-dev/xmc/account-srv/proto/role/role.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0xef, 0xd2, 0x40,
	0x10, 0x05, 0xfa, 0x27, 0x71, 0xb0, 0xc4, 0x6c, 0xd0, 0x34, 0x24, 0x46, 0xac, 0x1e, 0xbc, 0xb0,
	0x35, 0x78, 0xf1, 0xa4, 0x06, 0xbd, 0x78, 0x32, 0x29, 0xe1, 0xe2, 0x45, 0xcb, 0x76, 0x90, 0x26,
	0x6d, 0xb7, 0x76, 0x4b, 0xe1, 0xb3, 0xf9, 0xe9, 0xcc, 0xee, 0xb6, 0x4a, 0x91, 0xc5, 0xfc, 0x7e,
	0x17, 0xe8, 0xec, 0xce, 0xbc, 0x37, 0x33, 0xef, 0xb5, 0xf0, 0xf6, 0x47, 0x5a, 0xef, 0x0f, 0x5b,
	0xca, 0x78, 0x1e, 0x9e, 0x72, 0xb6, 0x48, 0xb0, 0x91, 0xff, 0x61, 0xcc, 0x18, 0x3f, 0x14, 0xf5,
	0x42, 0x54, 0x4d, 0x58, 0x56, 0xbc, 0xe6, 0x61, 0xc5, 0x33, 0x54, 0x3f, 0x54, 0xc5, 0x64, 0x7a,
	0xca, 0x19, 0x15, 0x55, 0x43, 0xdb, 0x54, 0x2a, 0xef, 0x82, 0x0f, 0x60, 0x47, 0x3c, 0x43, 0x32,
	0x81, 0x51, 0x9a, 0xf8, 0xc3, 0xf9, 0xf0, 0xd5, 0x83, 0x68, 0x94, 0x26, 0x84, 0x80, 0x5d, 0xc4,
	0x39, 0xfa, 0x23, 0x75, 0xa2, 0x9e, 0xc9, 0x14, 0x1c, 0xc1, 0x78, 0x89, 0xbe, 0xa5, 0x0e, 0x75,
	0x10, 0xbc, 0x07, 0xef, 0x63, 0x85, 0x71, 0x8d, 0x11, 0xfe, 0x3c, 0xa0, 0xa8, 0x09, 0x05, 0x5b,
	0x42, 0x2b, 0xb0, 0xf1, 0x72, 0x46, 0xaf, 0xf1, 0x52, 0x49, 0x1a, 0xa9, 0xbc, 0xe0, 0x11, 0x4c,
	0x3a, 0x00, 0x51, 0xf2, 0x42, 0x60, 0xf0, 0x14, 0xc6, 0x11, 0xc6, 0x49, 0x07, 0x78, 0xd1, 0x5b,
	0xf0, 0x0e, 0x1e, 0xea, 0x6b, 0x9d, 0x7e, 0x67, 0xc2, 0xef, 0xe0, 0x6d, 0xca, 0xe4, 0xac, 0xe3,
	0x7b, 0x0f, 0x4f, 0x1e, 0x83, 0x5b, 0xe0, 0xf1, 0x5b, 0x9a, 0xf8, 0xb6, 0x3e, 0x2e, 0xf0, 0xf8,
	0x39, 0x91, 0x23, 0x75, 0x0c, 0xed, 0x48, 0xcf, 0xc0, 0xfb, 0x84, 0x19, 0x1a, 0x39, 0x65, 0x49,
	0x97, 0xd0, 0x96, 0x1c, 0xc1, 0x5b, 0x63, 0x5c, 0xb1, 0x7d, 0x57, 0x32, 0x05, 0x27, 0x4b, 0xf3,
	0xb4, 0x56, 0x55, 0x5e, 0xa4, 0x03, 0xf2, 0x04, 0x5c, 0xbe, 0xdb, 0x09, 0xac, 0x55, 0xbb, 0x5e,
	0xd4, 0x46, 0x2d, 0x81, 0xf5, 0xcf, 0x50, 0xf6, 0xb5, 0xa1, 0x9c, 0x73, 0x45, 0x57, 0x30, 0xe9,
	0x88, 0xdb, 0x0d, 0xbf, 0x06, 0x47, 0x6e, 0x4e, 0xf8, 0xc3, 0xb9, 0xf5, 0x9f, 0x15, 0xeb, 0xc4,
	0xe5, 0x2f, 0x0b, 0xc6, 0x32, 0x5e, 0x63, 0xd5, 0xa4, 0x0c, 0xc9, 0x06, 0x5c, 0x2d, 0x32, 0x79,
	0x71, 0xbd, 0xb8, 0xe7, 0xa1, 0xd9, 0xcb, 0xdb, 0x49, 0xed, 0x86, 0x06, 0xe4, 0x0b, 0xd8, 0xd2,
	0x0a, 0xe4, 0xb9, 0xa1, 0xa3, 0xbf, 0x2e, 0x9a, 0x05, 0xb7, 0x52, 0xfe, 0x00, 0x6e, 0xc0, 0xd5,
	0xca, 0x99, 0xfa, 0xec, 0x39, 0xc7, 0xd4, 0xe7, 0x85, 0xf8, 0x0a, 0x56, 0xab, 0x6b, 0x82, 0xed,
	0x99, 0xc3, 0x04, 0x7b, 0x61, 0x10, 0x05, 0xab, 0x95, 0x32, 0xc1, 0xf6, 0x0c, 0x64, 0x82, 0xed,
	0x8b, 0x1d, 0x0c, 0x56, 0xee, 0x57, 0xf5, 0xa2, 0x6c, 0x5d, 0xf5, 0xe5, 0x78, 0xf3, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x28, 0x43, 0xc0, 0x92, 0x75, 0x04, 0x00, 0x00,
}

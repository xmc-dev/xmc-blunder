// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/xmc-dev/xmc/dispatcher-srv/proto/meta/meta.proto

/*
Package meta is a generated protocol buffer package.

It is generated from these files:
	github.com/xmc-dev/xmc/dispatcher-srv/proto/meta/meta.proto

It has these top-level messages:
	GetEvalsRequest
	GetEvalsResponse
	DispatchNextRequest
	DispatchNextResponse
*/
package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xmc_srv_eval_eval "github.com/xmc-dev/xmc/eval-srv/proto/eval"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetEvalsRequest struct {
	Refresh bool `protobuf:"varint,1,opt,name=refresh" json:"refresh,omitempty"`
}

func (m *GetEvalsRequest) Reset()                    { *m = GetEvalsRequest{} }
func (m *GetEvalsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEvalsRequest) ProtoMessage()               {}
func (*GetEvalsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetEvalsRequest) GetRefresh() bool {
	if m != nil {
		return m.Refresh
	}
	return false
}

type GetEvalsResponse struct {
	Evals []*xmc_srv_eval_eval.NodeInfo `protobuf:"bytes,1,rep,name=evals" json:"evals,omitempty"`
}

func (m *GetEvalsResponse) Reset()                    { *m = GetEvalsResponse{} }
func (m *GetEvalsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEvalsResponse) ProtoMessage()               {}
func (*GetEvalsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetEvalsResponse) GetEvals() []*xmc_srv_eval_eval.NodeInfo {
	if m != nil {
		return m.Evals
	}
	return nil
}

type DispatchNextRequest struct {
}

func (m *DispatchNextRequest) Reset()                    { *m = DispatchNextRequest{} }
func (m *DispatchNextRequest) String() string            { return proto.CompactTextString(m) }
func (*DispatchNextRequest) ProtoMessage()               {}
func (*DispatchNextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DispatchNextResponse struct {
}

func (m *DispatchNextResponse) Reset()                    { *m = DispatchNextResponse{} }
func (m *DispatchNextResponse) String() string            { return proto.CompactTextString(m) }
func (*DispatchNextResponse) ProtoMessage()               {}
func (*DispatchNextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*GetEvalsRequest)(nil), "xmc.srv.dispatcher.meta.GetEvalsRequest")
	proto.RegisterType((*GetEvalsResponse)(nil), "xmc.srv.dispatcher.meta.GetEvalsResponse")
	proto.RegisterType((*DispatchNextRequest)(nil), "xmc.srv.dispatcher.meta.DispatchNextRequest")
	proto.RegisterType((*DispatchNextResponse)(nil), "xmc.srv.dispatcher.meta.DispatchNextResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MetaService service

type MetaServiceClient interface {
	GetEvals(ctx context.Context, in *GetEvalsRequest, opts ...client.CallOption) (*GetEvalsResponse, error)
	DispatchNext(ctx context.Context, in *DispatchNextRequest, opts ...client.CallOption) (*DispatchNextResponse, error)
}

type metaServiceClient struct {
	c           client.Client
	serviceName string
}

func NewMetaServiceClient(serviceName string, c client.Client) MetaServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "xmc.srv.dispatcher.meta"
	}
	return &metaServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *metaServiceClient) GetEvals(ctx context.Context, in *GetEvalsRequest, opts ...client.CallOption) (*GetEvalsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "MetaService.GetEvals", in)
	out := new(GetEvalsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) DispatchNext(ctx context.Context, in *DispatchNextRequest, opts ...client.CallOption) (*DispatchNextResponse, error) {
	req := c.c.NewRequest(c.serviceName, "MetaService.DispatchNext", in)
	out := new(DispatchNextResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaService service

type MetaServiceHandler interface {
	GetEvals(context.Context, *GetEvalsRequest, *GetEvalsResponse) error
	DispatchNext(context.Context, *DispatchNextRequest, *DispatchNextResponse) error
}

func RegisterMetaServiceHandler(s server.Server, hdlr MetaServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&MetaService{hdlr}, opts...))
}

type MetaService struct {
	MetaServiceHandler
}

func (h *MetaService) GetEvals(ctx context.Context, in *GetEvalsRequest, out *GetEvalsResponse) error {
	return h.MetaServiceHandler.GetEvals(ctx, in, out)
}

func (h *MetaService) DispatchNext(ctx context.Context, in *DispatchNextRequest, out *DispatchNextResponse) error {
	return h.MetaServiceHandler.DispatchNext(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/xmc-dev/xmc/dispatcher-srv/proto/meta/meta.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcf, 0x4b, 0xc3, 0x30,
	0x18, 0xb5, 0xa8, 0x73, 0x7c, 0x13, 0x94, 0xf8, 0xab, 0xd4, 0xcb, 0xe8, 0xa9, 0xa2, 0x4d, 0x71,
	0xe2, 0xc9, 0x9b, 0x38, 0xc4, 0x83, 0x3b, 0xd4, 0x9b, 0xb7, 0xac, 0xfd, 0x66, 0x0b, 0xcb, 0x52,
	0x93, 0x2c, 0xf4, 0xbf, 0xf5, 0x5f, 0x91, 0xa4, 0x2b, 0x9b, 0xb2, 0xc2, 0x2e, 0xaf, 0xbc, 0x7e,
	0x2f, 0xef, 0xbd, 0x2f, 0x81, 0xa7, 0xaf, 0x52, 0x17, 0xcb, 0x29, 0xcd, 0x04, 0x4f, 0x6a, 0x9e,
	0xc5, 0x39, 0x1a, 0xfb, 0x4d, 0xf2, 0x52, 0x55, 0x4c, 0x67, 0x05, 0xca, 0x58, 0x49, 0x93, 0x54,
	0x52, 0x68, 0x91, 0x70, 0xd4, 0xcc, 0x01, 0x75, 0x9c, 0x5c, 0xd5, 0x3c, 0xa3, 0x4a, 0x1a, 0xba,
	0x56, 0x53, 0x3b, 0x0e, 0x1e, 0x3b, 0x5c, 0xd1, 0xb0, 0xf9, 0x86, 0x9f, 0xa5, 0x0e, 0x1a, 0xbf,
	0xf0, 0x16, 0x4e, 0x5e, 0x51, 0x8f, 0x0d, 0x9b, 0xab, 0x14, 0xbf, 0x97, 0xa8, 0x34, 0xf1, 0xe1,
	0x48, 0xe2, 0x4c, 0xa2, 0x2a, 0x7c, 0x6f, 0xe8, 0x45, 0xfd, 0xb4, 0xa5, 0xe1, 0x18, 0x4e, 0xd7,
	0x62, 0x55, 0x89, 0x85, 0x42, 0x72, 0x0f, 0x87, 0xd6, 0x4e, 0xf9, 0xde, 0x70, 0x3f, 0x1a, 0x8c,
	0xae, 0x69, 0x5b, 0xd0, 0x85, 0x38, 0x98, 0x88, 0x1c, 0xdf, 0x16, 0x33, 0x91, 0x36, 0xca, 0xf0,
	0x02, 0xce, 0x5e, 0x56, 0xed, 0x27, 0x58, 0xeb, 0x55, 0x6e, 0x78, 0x09, 0xe7, 0x7f, 0x7f, 0x37,
	0x09, 0xa3, 0x1f, 0x0f, 0x06, 0xef, 0xa8, 0xd9, 0x07, 0x4a, 0x53, 0x66, 0x48, 0x18, 0xf4, 0xdb,
	0x16, 0x24, 0xa2, 0x1d, 0xf7, 0x41, 0xff, 0x6d, 0x15, 0xdc, 0xec, 0xa0, 0x6c, 0x02, 0xc3, 0x3d,
	0xc2, 0xe1, 0x78, 0xb3, 0x0a, 0xb9, 0xeb, 0x3c, 0xbc, 0x65, 0x91, 0x20, 0xde, 0x51, 0xdd, 0xc6,
	0x3d, 0xf7, 0x3e, 0x0f, 0xec, 0x78, 0xda, 0x73, 0x6f, 0xf2, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x71, 0x70, 0xda, 0xc4, 0x22, 0x02, 0x00, 0x00,
}

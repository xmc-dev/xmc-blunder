// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/xmc-dev/xmc/dispatcher-srv/proto/job/job.proto

/*
Package job is a generated protocol buffer package.

It is generated from these files:
	github.com/xmc-dev/xmc/dispatcher-srv/proto/job/job.proto

It has these top-level messages:
	StateValue
	Job
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	SearchRequest
	SearchResponse
	FinishRequest
	FinishResponse
*/
package job

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xmc_srv_core_result "github.com/xmc-dev/xmc/xmc-core/proto/result"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_WAITING    State = 0
	State_PROCESSING State = 1
	State_DONE       State = 2
)

var State_name = map[int32]string{
	0: "WAITING",
	1: "PROCESSING",
	2: "DONE",
}
var State_value = map[string]int32{
	"WAITING":    0,
	"PROCESSING": 1,
	"DONE":       2,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StateValue struct {
	Value State `protobuf:"varint,1,opt,name=value,enum=xmc.srv.dispatcher.job.State" json:"value,omitempty"`
}

func (m *StateValue) Reset()                    { *m = StateValue{} }
func (m *StateValue) String() string            { return proto.CompactTextString(m) }
func (*StateValue) ProtoMessage()               {}
func (*StateValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StateValue) GetValue() State {
	if m != nil {
		return m.Value
	}
	return State_WAITING
}

type Job struct {
	Uuid         string                      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	DatasetId    string                      `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Code         []byte                      `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Language     string                      `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	EvalId       string                      `protobuf:"bytes,5,opt,name=eval_id,json=evalId" json:"eval_id,omitempty"`
	Result       *xmc_srv_core_result.Result `protobuf:"bytes,6,opt,name=result" json:"result,omitempty"`
	State        State                       `protobuf:"varint,7,opt,name=state,enum=xmc.srv.dispatcher.job.State" json:"state,omitempty"`
	CreatedAt    *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	FinishedAt   *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=finished_at,json=finishedAt" json:"finished_at,omitempty"`
	SubmissionId string                      `protobuf:"bytes,10,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	TaskId       string                      `protobuf:"bytes,11,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Job) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Job) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Job) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Job) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Job) GetEvalId() string {
	if m != nil {
		return m.EvalId
	}
	return ""
}

func (m *Job) GetResult() *xmc_srv_core_result.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Job) GetState() State {
	if m != nil {
		return m.State
	}
	return State_WAITING
}

func (m *Job) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Job) GetFinishedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *Job) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

func (m *Job) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type CreateRequest struct {
	Job      *Job  `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Priority int32 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *CreateRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type CreateResponse struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type ReadRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type ReadResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type SearchRequest struct {
	Limit        uint64      `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset       uint64      `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	TaskId       string      `protobuf:"bytes,3,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	DatasetId    string      `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Language     string      `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	EvalId       string      `protobuf:"bytes,6,opt,name=eval_id,json=evalId" json:"eval_id,omitempty"`
	State        *StateValue `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	ErrorMessage string      `protobuf:"bytes,8,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SearchRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *SearchRequest) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *SearchRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *SearchRequest) GetEvalId() string {
	if m != nil {
		return m.EvalId
	}
	return ""
}

func (m *SearchRequest) GetState() *StateValue {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SearchRequest) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type SearchResponse struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SearchResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type FinishRequest struct {
	JobUuid string                      `protobuf:"bytes,1,opt,name=job_uuid,json=jobUuid" json:"job_uuid,omitempty"`
	Result  *xmc_srv_core_result.Result `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *FinishRequest) Reset()                    { *m = FinishRequest{} }
func (m *FinishRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishRequest) ProtoMessage()               {}
func (*FinishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FinishRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *FinishRequest) GetResult() *xmc_srv_core_result.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type FinishResponse struct {
	NextJob *Job `protobuf:"bytes,1,opt,name=next_job,json=nextJob" json:"next_job,omitempty"`
}

func (m *FinishResponse) Reset()                    { *m = FinishResponse{} }
func (m *FinishResponse) String() string            { return proto.CompactTextString(m) }
func (*FinishResponse) ProtoMessage()               {}
func (*FinishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FinishResponse) GetNextJob() *Job {
	if m != nil {
		return m.NextJob
	}
	return nil
}

func init() {
	proto.RegisterType((*StateValue)(nil), "xmc.srv.dispatcher.job.StateValue")
	proto.RegisterType((*Job)(nil), "xmc.srv.dispatcher.job.Job")
	proto.RegisterType((*CreateRequest)(nil), "xmc.srv.dispatcher.job.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "xmc.srv.dispatcher.job.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "xmc.srv.dispatcher.job.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "xmc.srv.dispatcher.job.ReadResponse")
	proto.RegisterType((*SearchRequest)(nil), "xmc.srv.dispatcher.job.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "xmc.srv.dispatcher.job.SearchResponse")
	proto.RegisterType((*FinishRequest)(nil), "xmc.srv.dispatcher.job.FinishRequest")
	proto.RegisterType((*FinishResponse)(nil), "xmc.srv.dispatcher.job.FinishResponse")
	proto.RegisterEnum("xmc.srv.dispatcher.job.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for JobsService service

type JobsServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Finish(ctx context.Context, in *FinishRequest, opts ...client.CallOption) (*FinishResponse, error)
}

type jobsServiceClient struct {
	c           client.Client
	serviceName string
}

func NewJobsServiceClient(serviceName string, c client.Client) JobsServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "xmc.srv.dispatcher.job"
	}
	return &jobsServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *jobsServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobsService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobsService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobsService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Finish(ctx context.Context, in *FinishRequest, opts ...client.CallOption) (*FinishResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobsService.Finish", in)
	out := new(FinishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobsService service

type JobsServiceHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Finish(context.Context, *FinishRequest, *FinishResponse) error
}

func RegisterJobsServiceHandler(s server.Server, hdlr JobsServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&JobsService{hdlr}, opts...))
}

type JobsService struct {
	JobsServiceHandler
}

func (h *JobsService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.JobsServiceHandler.Create(ctx, in, out)
}

func (h *JobsService) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.JobsServiceHandler.Read(ctx, in, out)
}

func (h *JobsService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.JobsServiceHandler.Search(ctx, in, out)
}

func (h *JobsService) Finish(ctx context.Context, in *FinishRequest, out *FinishResponse) error {
	return h.JobsServiceHandler.Finish(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/xmc-dev/xmc/dispatcher-srv/proto/job/job.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xed, 0x6e, 0x12, 0x4d,
	0x14, 0x2e, 0xb0, 0x2c, 0x70, 0x28, 0xa4, 0x99, 0xbc, 0xe9, 0xbb, 0x62, 0x1a, 0x71, 0x5b, 0x4d,
	0x63, 0xd2, 0x25, 0xa1, 0x89, 0xb1, 0x31, 0xfe, 0xc0, 0x5a, 0x15, 0x12, 0x5b, 0xb3, 0x54, 0x4d,
	0xfb, 0x87, 0xec, 0xc7, 0x00, 0x83, 0x2c, 0x83, 0x33, 0xb3, 0xa4, 0x5e, 0x82, 0x97, 0xe1, 0x35,
	0x7a, 0x03, 0x66, 0x66, 0x76, 0x29, 0x34, 0xdd, 0xb6, 0xfe, 0x20, 0x3b, 0x67, 0xe6, 0x39, 0x5f,
	0xcf, 0x79, 0x0e, 0x70, 0x34, 0x22, 0x62, 0x1c, 0xfb, 0x4e, 0x40, 0xa3, 0xd6, 0x55, 0x14, 0x1c,
	0x84, 0x78, 0x21, 0xbf, 0xad, 0x90, 0xf0, 0xb9, 0x27, 0x82, 0x31, 0x66, 0x07, 0x9c, 0x2d, 0x5a,
	0x73, 0x46, 0x05, 0x6d, 0x4d, 0xa8, 0x2f, 0x7f, 0x8e, 0xb2, 0xd0, 0xf6, 0x55, 0x14, 0x38, 0x9c,
	0x2d, 0x9c, 0x6b, 0xac, 0x33, 0xa1, 0x7e, 0x23, 0x2b, 0xa4, 0x3c, 0x07, 0x94, 0xe1, 0x24, 0x18,
	0xc3, 0x3c, 0x9e, 0x8a, 0xe4, 0xa3, 0x43, 0x36, 0x9e, 0x8c, 0x28, 0x1d, 0x4d, 0x13, 0x84, 0x1f,
	0x0f, 0x5b, 0x82, 0x44, 0x98, 0x0b, 0x2f, 0x9a, 0x6b, 0x80, 0xdd, 0x01, 0xe8, 0x0b, 0x4f, 0xe0,
	0xaf, 0xde, 0x34, 0xc6, 0xe8, 0x10, 0x8a, 0x0b, 0x79, 0xb0, 0x72, 0xcd, 0xdc, 0x7e, 0xbd, 0xbd,
	0xe3, 0xdc, 0x5e, 0x91, 0xa3, 0x5c, 0x5c, 0x8d, 0xb5, 0x7f, 0x17, 0xa0, 0xd0, 0xa3, 0x3e, 0x42,
	0x60, 0xc4, 0x31, 0x09, 0x95, 0x6f, 0xc5, 0x55, 0x67, 0xb4, 0x03, 0x10, 0x7a, 0xc2, 0xe3, 0x58,
	0x0c, 0x48, 0x68, 0xe5, 0xd5, 0x4b, 0x25, 0xb9, 0xe9, 0x86, 0xd2, 0x25, 0xa0, 0x21, 0xb6, 0x0a,
	0xcd, 0xdc, 0xfe, 0xa6, 0xab, 0xce, 0xa8, 0x01, 0xe5, 0xa9, 0x37, 0x1b, 0xc5, 0xde, 0x08, 0x5b,
	0x86, 0x72, 0x58, 0xda, 0xe8, 0x7f, 0x28, 0xe1, 0x85, 0x37, 0x95, 0xb1, 0x8a, 0xea, 0xc9, 0x94,
	0x66, 0x37, 0x44, 0x87, 0x60, 0xea, 0xbe, 0x2d, 0xb3, 0x99, 0xdb, 0xaf, 0xb6, 0x1f, 0x2f, 0x2b,
	0x97, 0x04, 0x39, 0x09, 0x27, 0xae, 0xfa, 0xb8, 0x09, 0x54, 0x76, 0xcb, 0x65, 0x23, 0x56, 0xe9,
	0x41, 0xdd, 0x2a, 0x2c, 0x3a, 0x02, 0x08, 0x18, 0xf6, 0x04, 0x0e, 0x07, 0x9e, 0xb0, 0xca, 0x2a,
	0x5b, 0xc3, 0xd1, 0x34, 0x3b, 0x29, 0xcd, 0xce, 0x79, 0x4a, 0xb3, 0x5b, 0x49, 0xd0, 0x1d, 0x81,
	0x5e, 0x43, 0x75, 0x48, 0x66, 0x84, 0x8f, 0xb5, 0x6f, 0xe5, 0x5e, 0x5f, 0x48, 0xe1, 0x1d, 0x81,
	0x76, 0xa1, 0xc6, 0x63, 0x3f, 0x22, 0x9c, 0x13, 0x3a, 0x93, 0x04, 0x80, 0x22, 0x60, 0xf3, 0xfa,
	0xb2, 0x1b, 0x4a, 0x7e, 0x84, 0xc7, 0xbf, 0xcb, 0xe7, 0xaa, 0xe6, 0x47, 0x9a, 0xdd, 0xd0, 0xbe,
	0x84, 0xda, 0xb1, 0xaa, 0xc3, 0xc5, 0x3f, 0x62, 0xcc, 0x05, 0x3a, 0x80, 0xc2, 0x84, 0xfa, 0x6a,
	0x56, 0xab, 0x6c, 0xdd, 0xe8, 0xbc, 0x47, 0x7d, 0x57, 0xe2, 0xe4, 0x50, 0xe6, 0x8c, 0x50, 0x46,
	0xc4, 0x4f, 0x35, 0xc5, 0xa2, 0xbb, 0xb4, 0xed, 0x3d, 0xa8, 0xa7, 0xb1, 0xf9, 0x9c, 0xce, 0x38,
	0xbe, 0x4d, 0x09, 0xf6, 0x53, 0xa8, 0xba, 0xd8, 0x0b, 0xd3, 0xfc, 0xb7, 0x41, 0xde, 0xc0, 0xa6,
	0x86, 0x24, 0x61, 0xfe, 0xad, 0x46, 0xfb, 0x57, 0x1e, 0x6a, 0x7d, 0xec, 0xb1, 0x60, 0x9c, 0x26,
	0xf9, 0x0f, 0x8a, 0x53, 0x12, 0x11, 0xa1, 0x42, 0x18, 0xae, 0x36, 0xd0, 0x36, 0x98, 0x74, 0x38,
	0xe4, 0x58, 0xa8, 0x4e, 0x0c, 0x37, 0xb1, 0x56, 0xc9, 0x2b, 0xac, 0x92, 0x77, 0x43, 0xc4, 0xc6,
	0x4d, 0x11, 0xaf, 0x0a, 0xb6, 0x98, 0x2d, 0x58, 0x73, 0x4d, 0xb0, 0xaf, 0x56, 0xb5, 0x57, 0x6d,
	0xdb, 0x77, 0x6a, 0x4f, 0x2d, 0x67, 0x2a, 0xc0, 0x5d, 0xa8, 0x61, 0xc6, 0x28, 0x1b, 0x44, 0x98,
	0x73, 0x99, 0xb3, 0xac, 0x85, 0xa0, 0x2e, 0x3f, 0xe9, 0x3b, 0xbb, 0x03, 0xf5, 0x94, 0x8a, 0x84,
	0xcc, 0x16, 0x18, 0x13, 0xea, 0x73, 0x2b, 0xd7, 0x2c, 0xdc, 0xc7, 0xa6, 0x02, 0xda, 0x03, 0xa8,
	0xbd, 0x57, 0xf2, 0x4b, 0xd9, 0x7c, 0x04, 0xe5, 0x09, 0xf5, 0x07, 0x2b, 0x63, 0x2b, 0x4d, 0xa8,
	0xff, 0x45, 0xae, 0xf9, 0xf5, 0xfa, 0xe5, 0x1f, 0xbc, 0x7e, 0xf6, 0x47, 0xa8, 0xa7, 0x09, 0x92,
	0x1a, 0x5f, 0x42, 0x79, 0x86, 0xaf, 0xc4, 0xe0, 0x81, 0x53, 0x2f, 0x49, 0x70, 0x8f, 0xfa, 0x2f,
	0x1c, 0x28, 0x2a, 0x9e, 0x50, 0x15, 0x4a, 0xdf, 0x3a, 0xdd, 0xf3, 0xee, 0xe9, 0x87, 0xad, 0x0d,
	0x54, 0x07, 0xf8, 0xec, 0x9e, 0x1d, 0x9f, 0xf4, 0xfb, 0xd2, 0xce, 0xa1, 0x32, 0x18, 0xef, 0xce,
	0x4e, 0x4f, 0xb6, 0xf2, 0xed, 0x3f, 0x79, 0xa8, 0xf6, 0xa8, 0xcf, 0xfb, 0x98, 0x2d, 0x48, 0x80,
	0xd1, 0x05, 0x98, 0x5a, 0xc1, 0xe8, 0x59, 0x56, 0xbe, 0xb5, 0xed, 0x69, 0x3c, 0xbf, 0x0f, 0xa6,
	0x1b, 0xb2, 0x37, 0x50, 0x1f, 0x0c, 0xa9, 0x69, 0xb4, 0x9b, 0xe5, 0xb1, 0xb2, 0x14, 0x8d, 0xbd,
	0xbb, 0x41, 0xcb, 0xa0, 0x17, 0x60, 0xea, 0xe9, 0x66, 0xd7, 0xbb, 0xb6, 0x08, 0xd9, 0xf5, 0xae,
	0x8b, 0x44, 0x87, 0xd6, 0x43, 0xc9, 0x0e, 0xbd, 0xa6, 0x8a, 0xec, 0xd0, 0xeb, 0xb3, 0xb5, 0x37,
	0xde, 0x16, 0x2f, 0xe5, 0x9a, 0xfa, 0xa6, 0xfa, 0xa3, 0x3b, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0x2d, 0x62, 0xf9, 0x29, 0x07, 0x00, 0x00,
}

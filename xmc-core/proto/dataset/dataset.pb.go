// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/xmc-dev/xmc/xmc-core/proto/dataset/dataset.proto

/*
Package dataset is a generated protocol buffer package.

It is generated from these files:
	github.com/xmc-dev/xmc/xmc-core/proto/dataset/dataset.proto

It has these top-level messages:
	Dataset
	TestCase
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	GetRequest
	GetResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
	AddTestCaseRequest
	AddTestCaseResponse
	GetTestCasesRequest
	GetTestCasesResponse
	GetTestCaseRequest
	GetTestCaseResponse
	UpdateTestCaseRequest
	UpdateTestCaseResponse
	RemoveTestCaseRequest
	RemoveTestCaseResponse
*/
package dataset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xmc_srv_core_searchmeta "github.com/xmc-dev/xmc/xmc-core/proto/searchmeta"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dataset struct {
	Id          string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string                    `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	GraderId    string                    `protobuf:"bytes,2,opt,name=grader_id,json=graderId" json:"grader_id,omitempty"`
	Description string                    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	MemoryLimit int32                     `protobuf:"varint,4,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	TimeLimit   *google_protobuf.Duration `protobuf:"bytes,5,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
}

func (m *Dataset) Reset()                    { *m = Dataset{} }
func (m *Dataset) String() string            { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()               {}
func (*Dataset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Dataset) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetGraderId() string {
	if m != nil {
		return m.GraderId
	}
	return ""
}

func (m *Dataset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dataset) GetMemoryLimit() int32 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *Dataset) GetTimeLimit() *google_protobuf.Duration {
	if m != nil {
		return m.TimeLimit
	}
	return nil
}

type TestCase struct {
	Id                 string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Number             int32  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	InputAttachmentId  string `protobuf:"bytes,2,opt,name=input_attachment_id,json=inputAttachmentId" json:"input_attachment_id,omitempty"`
	OutputAttachmentId string `protobuf:"bytes,3,opt,name=output_attachment_id,json=outputAttachmentId" json:"output_attachment_id,omitempty"`
}

func (m *TestCase) Reset()                    { *m = TestCase{} }
func (m *TestCase) String() string            { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()               {}
func (*TestCase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestCase) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestCase) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *TestCase) GetInputAttachmentId() string {
	if m != nil {
		return m.InputAttachmentId
	}
	return ""
}

func (m *TestCase) GetOutputAttachmentId() string {
	if m != nil {
		return m.OutputAttachmentId
	}
	return ""
}

type CreateRequest struct {
	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

type CreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadResponse struct {
	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadResponse) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

type GetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetResponse struct {
	Dataset *Dataset `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetResponse) GetDataset() *Dataset {
	if m != nil {
		return m.Dataset
	}
	return nil
}

type UpdateRequest struct {
	Id          string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Description string                    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	GraderId    string                    `protobuf:"bytes,3,opt,name=grader_id,json=graderId" json:"grader_id,omitempty"`
	Name        string                    `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	MemoryLimit int32                     `protobuf:"varint,5,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	TimeLimit   *google_protobuf.Duration `protobuf:"bytes,6,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateRequest) GetGraderId() string {
	if m != nil {
		return m.GraderId
	}
	return ""
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetMemoryLimit() int32 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *UpdateRequest) GetTimeLimit() *google_protobuf.Duration {
	if m != nil {
		return m.TimeLimit
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SearchRequest struct {
	Limit       uint32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset      uint32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	GraderId    string `protobuf:"bytes,3,opt,name=grader_id,json=graderId" json:"grader_id,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetGraderId() string {
	if m != nil {
		return m.GraderId
	}
	return ""
}

func (m *SearchRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SearchResponse struct {
	Datasets []*Dataset                    `protobuf:"bytes,1,rep,name=datasets" json:"datasets,omitempty"`
	Meta     *xmc_srv_core_searchmeta.Meta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SearchResponse) GetDatasets() []*Dataset {
	if m != nil {
		return m.Datasets
	}
	return nil
}

func (m *SearchResponse) GetMeta() *xmc_srv_core_searchmeta.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type AddTestCaseRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	Input  []byte `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Output []byte `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *AddTestCaseRequest) Reset()                    { *m = AddTestCaseRequest{} }
func (m *AddTestCaseRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTestCaseRequest) ProtoMessage()               {}
func (*AddTestCaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddTestCaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddTestCaseRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *AddTestCaseRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *AddTestCaseRequest) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type AddTestCaseResponse struct {
}

func (m *AddTestCaseResponse) Reset()                    { *m = AddTestCaseResponse{} }
func (m *AddTestCaseResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTestCaseResponse) ProtoMessage()               {}
func (*AddTestCaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type GetTestCasesRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetTestCasesRequest) Reset()                    { *m = GetTestCasesRequest{} }
func (m *GetTestCasesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTestCasesRequest) ProtoMessage()               {}
func (*GetTestCasesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetTestCasesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTestCasesResponse struct {
	TestCases []*TestCase `protobuf:"bytes,1,rep,name=test_cases,json=testCases" json:"test_cases,omitempty"`
}

func (m *GetTestCasesResponse) Reset()                    { *m = GetTestCasesResponse{} }
func (m *GetTestCasesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTestCasesResponse) ProtoMessage()               {}
func (*GetTestCasesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetTestCasesResponse) GetTestCases() []*TestCase {
	if m != nil {
		return m.TestCases
	}
	return nil
}

type GetTestCaseRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *GetTestCaseRequest) Reset()                    { *m = GetTestCaseRequest{} }
func (m *GetTestCaseRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTestCaseRequest) ProtoMessage()               {}
func (*GetTestCaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetTestCaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetTestCaseRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type GetTestCaseResponse struct {
	TestCase *TestCase `protobuf:"bytes,1,opt,name=test_case,json=testCase" json:"test_case,omitempty"`
}

func (m *GetTestCaseResponse) Reset()                    { *m = GetTestCaseResponse{} }
func (m *GetTestCaseResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTestCaseResponse) ProtoMessage()               {}
func (*GetTestCaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetTestCaseResponse) GetTestCase() *TestCase {
	if m != nil {
		return m.TestCase
	}
	return nil
}

type UpdateTestCaseRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	Input  []byte `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Output []byte `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *UpdateTestCaseRequest) Reset()                    { *m = UpdateTestCaseRequest{} }
func (m *UpdateTestCaseRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTestCaseRequest) ProtoMessage()               {}
func (*UpdateTestCaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UpdateTestCaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateTestCaseRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *UpdateTestCaseRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *UpdateTestCaseRequest) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type UpdateTestCaseResponse struct {
}

func (m *UpdateTestCaseResponse) Reset()                    { *m = UpdateTestCaseResponse{} }
func (m *UpdateTestCaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTestCaseResponse) ProtoMessage()               {}
func (*UpdateTestCaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type RemoveTestCaseRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *RemoveTestCaseRequest) Reset()                    { *m = RemoveTestCaseRequest{} }
func (m *RemoveTestCaseRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveTestCaseRequest) ProtoMessage()               {}
func (*RemoveTestCaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RemoveTestCaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RemoveTestCaseRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type RemoveTestCaseResponse struct {
}

func (m *RemoveTestCaseResponse) Reset()                    { *m = RemoveTestCaseResponse{} }
func (m *RemoveTestCaseResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveTestCaseResponse) ProtoMessage()               {}
func (*RemoveTestCaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func init() {
	proto.RegisterType((*Dataset)(nil), "xmc.srv.core.dataset.Dataset")
	proto.RegisterType((*TestCase)(nil), "xmc.srv.core.dataset.TestCase")
	proto.RegisterType((*CreateRequest)(nil), "xmc.srv.core.dataset.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "xmc.srv.core.dataset.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "xmc.srv.core.dataset.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "xmc.srv.core.dataset.ReadResponse")
	proto.RegisterType((*GetRequest)(nil), "xmc.srv.core.dataset.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "xmc.srv.core.dataset.GetResponse")
	proto.RegisterType((*UpdateRequest)(nil), "xmc.srv.core.dataset.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "xmc.srv.core.dataset.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "xmc.srv.core.dataset.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "xmc.srv.core.dataset.DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "xmc.srv.core.dataset.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "xmc.srv.core.dataset.SearchResponse")
	proto.RegisterType((*AddTestCaseRequest)(nil), "xmc.srv.core.dataset.AddTestCaseRequest")
	proto.RegisterType((*AddTestCaseResponse)(nil), "xmc.srv.core.dataset.AddTestCaseResponse")
	proto.RegisterType((*GetTestCasesRequest)(nil), "xmc.srv.core.dataset.GetTestCasesRequest")
	proto.RegisterType((*GetTestCasesResponse)(nil), "xmc.srv.core.dataset.GetTestCasesResponse")
	proto.RegisterType((*GetTestCaseRequest)(nil), "xmc.srv.core.dataset.GetTestCaseRequest")
	proto.RegisterType((*GetTestCaseResponse)(nil), "xmc.srv.core.dataset.GetTestCaseResponse")
	proto.RegisterType((*UpdateTestCaseRequest)(nil), "xmc.srv.core.dataset.UpdateTestCaseRequest")
	proto.RegisterType((*UpdateTestCaseResponse)(nil), "xmc.srv.core.dataset.UpdateTestCaseResponse")
	proto.RegisterType((*RemoveTestCaseRequest)(nil), "xmc.srv.core.dataset.RemoveTestCaseRequest")
	proto.RegisterType((*RemoveTestCaseResponse)(nil), "xmc.srv.core.dataset.RemoveTestCaseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DatasetService service

type DatasetServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	AddTestCase(ctx context.Context, in *AddTestCaseRequest, opts ...client.CallOption) (*AddTestCaseResponse, error)
	GetTestCases(ctx context.Context, in *GetTestCasesRequest, opts ...client.CallOption) (*GetTestCasesResponse, error)
	GetTestCase(ctx context.Context, in *GetTestCaseRequest, opts ...client.CallOption) (*GetTestCaseResponse, error)
	UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...client.CallOption) (*UpdateTestCaseResponse, error)
	RemoveTestCase(ctx context.Context, in *RemoveTestCaseRequest, opts ...client.CallOption) (*RemoveTestCaseResponse, error)
}

type datasetServiceClient struct {
	c           client.Client
	serviceName string
}

func NewDatasetServiceClient(serviceName string, c client.Client) DatasetServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "xmc.srv.core.dataset"
	}
	return &datasetServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *datasetServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) AddTestCase(ctx context.Context, in *AddTestCaseRequest, opts ...client.CallOption) (*AddTestCaseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.AddTestCase", in)
	out := new(AddTestCaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetTestCases(ctx context.Context, in *GetTestCasesRequest, opts ...client.CallOption) (*GetTestCasesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.GetTestCases", in)
	out := new(GetTestCasesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetTestCase(ctx context.Context, in *GetTestCaseRequest, opts ...client.CallOption) (*GetTestCaseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.GetTestCase", in)
	out := new(GetTestCaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...client.CallOption) (*UpdateTestCaseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.UpdateTestCase", in)
	out := new(UpdateTestCaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) RemoveTestCase(ctx context.Context, in *RemoveTestCaseRequest, opts ...client.CallOption) (*RemoveTestCaseResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DatasetService.RemoveTestCase", in)
	out := new(RemoveTestCaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatasetService service

type DatasetServiceHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	AddTestCase(context.Context, *AddTestCaseRequest, *AddTestCaseResponse) error
	GetTestCases(context.Context, *GetTestCasesRequest, *GetTestCasesResponse) error
	GetTestCase(context.Context, *GetTestCaseRequest, *GetTestCaseResponse) error
	UpdateTestCase(context.Context, *UpdateTestCaseRequest, *UpdateTestCaseResponse) error
	RemoveTestCase(context.Context, *RemoveTestCaseRequest, *RemoveTestCaseResponse) error
}

func RegisterDatasetServiceHandler(s server.Server, hdlr DatasetServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DatasetService{hdlr}, opts...))
}

type DatasetService struct {
	DatasetServiceHandler
}

func (h *DatasetService) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.DatasetServiceHandler.Create(ctx, in, out)
}

func (h *DatasetService) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.DatasetServiceHandler.Read(ctx, in, out)
}

func (h *DatasetService) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.DatasetServiceHandler.Get(ctx, in, out)
}

func (h *DatasetService) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.DatasetServiceHandler.Update(ctx, in, out)
}

func (h *DatasetService) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.DatasetServiceHandler.Delete(ctx, in, out)
}

func (h *DatasetService) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.DatasetServiceHandler.Search(ctx, in, out)
}

func (h *DatasetService) AddTestCase(ctx context.Context, in *AddTestCaseRequest, out *AddTestCaseResponse) error {
	return h.DatasetServiceHandler.AddTestCase(ctx, in, out)
}

func (h *DatasetService) GetTestCases(ctx context.Context, in *GetTestCasesRequest, out *GetTestCasesResponse) error {
	return h.DatasetServiceHandler.GetTestCases(ctx, in, out)
}

func (h *DatasetService) GetTestCase(ctx context.Context, in *GetTestCaseRequest, out *GetTestCaseResponse) error {
	return h.DatasetServiceHandler.GetTestCase(ctx, in, out)
}

func (h *DatasetService) UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, out *UpdateTestCaseResponse) error {
	return h.DatasetServiceHandler.UpdateTestCase(ctx, in, out)
}

func (h *DatasetService) RemoveTestCase(ctx context.Context, in *RemoveTestCaseRequest, out *RemoveTestCaseResponse) error {
	return h.DatasetServiceHandler.RemoveTestCase(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/xmc-dev/xmc/xmc-core/proto/dataset/dataset.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4b, 0x6f, 0xd3, 0x58,
	0x14, 0xae, 0xf3, 0x6a, 0x72, 0xf2, 0xd0, 0xcc, 0x6d, 0x5a, 0x65, 0x3c, 0x6a, 0x27, 0xf5, 0xcc,
	0x48, 0x29, 0x0f, 0x07, 0xca, 0x02, 0x50, 0x41, 0xa8, 0xb4, 0x22, 0x54, 0x2a, 0x42, 0x72, 0xc9,
	0x86, 0x4d, 0xe4, 0xf8, 0xde, 0xa6, 0x46, 0x75, 0x1c, 0xec, 0x9b, 0xa8, 0x6c, 0xf8, 0x0d, 0x2c,
	0x58, 0xf3, 0x7f, 0x58, 0xf1, 0x97, 0x90, 0xef, 0xc3, 0xb1, 0x1d, 0x3b, 0x4d, 0xa9, 0xc4, 0xca,
	0xbe, 0xe7, 0x7c, 0xe7, 0x7d, 0xee, 0x67, 0xc3, 0xc1, 0xc8, 0xa6, 0x17, 0xd3, 0xa1, 0x6e, 0xb9,
	0x4e, 0xf7, 0xca, 0xb1, 0xee, 0x63, 0x32, 0x0b, 0x9e, 0xec, 0xdd, 0x72, 0x3d, 0xd2, 0x9d, 0x78,
	0x2e, 0x75, 0xbb, 0xd8, 0xa4, 0xa6, 0x4f, 0xa8, 0x7c, 0xea, 0x4c, 0x8a, 0x9a, 0x57, 0x8e, 0xa5,
	0xfb, 0xde, 0x4c, 0x0f, 0x90, 0xba, 0xd0, 0xa9, 0x87, 0xab, 0xb9, 0xf4, 0x89, 0xe9, 0x59, 0x17,
	0x0e, 0xa1, 0x66, 0xe4, 0x95, 0x3b, 0x56, 0x77, 0x46, 0xae, 0x3b, 0xba, 0x14, 0xc8, 0xe1, 0xf4,
	0xbc, 0x8b, 0xa7, 0x9e, 0x49, 0x6d, 0x77, 0xcc, 0xf5, 0xda, 0x77, 0x05, 0xd6, 0x8f, 0x79, 0x38,
	0xd4, 0x80, 0x9c, 0x8d, 0x5b, 0x4a, 0x5b, 0xe9, 0x54, 0x8c, 0x9c, 0x8d, 0x11, 0x82, 0xc2, 0xd8,
	0x74, 0x48, 0xab, 0xc4, 0x24, 0xec, 0x1d, 0xfd, 0x0d, 0x95, 0x91, 0x67, 0x62, 0xe2, 0x0d, 0x6c,
	0xdc, 0xca, 0x31, 0x45, 0x99, 0x0b, 0x4e, 0x30, 0x6a, 0x43, 0x15, 0x13, 0xdf, 0xf2, 0xec, 0x49,
	0x10, 0xa1, 0x95, 0x67, 0xea, 0xa8, 0x08, 0xed, 0x42, 0xcd, 0x21, 0x8e, 0xeb, 0x7d, 0x1a, 0x5c,
	0xda, 0x8e, 0x4d, 0x5b, 0x85, 0xb6, 0xd2, 0x29, 0x1a, 0x55, 0x2e, 0x3b, 0x0d, 0x44, 0xe8, 0x09,
	0x00, 0xb5, 0x1d, 0x22, 0x00, 0xc5, 0xb6, 0xd2, 0xa9, 0xee, 0xff, 0xa5, 0xf3, 0x32, 0x74, 0x59,
	0x86, 0x7e, 0x2c, 0xca, 0x30, 0x2a, 0x01, 0x98, 0x59, 0x6a, 0x5f, 0x15, 0x28, 0xbf, 0x23, 0x3e,
	0x3d, 0x32, 0x7d, 0x22, 0x8a, 0x29, 0x84, 0xc5, 0x6c, 0x41, 0x69, 0x3c, 0x75, 0x86, 0xc4, 0x63,
	0x05, 0x16, 0x0d, 0x71, 0x42, 0x3a, 0x6c, 0xd8, 0xe3, 0xc9, 0x94, 0x0e, 0x4c, 0x4a, 0xcd, 0xa0,
	0x75, 0x63, 0x3a, 0x2f, 0xed, 0x4f, 0xa6, 0x3a, 0x0c, 0x35, 0x27, 0x18, 0x3d, 0x80, 0xa6, 0x3b,
	0xa5, 0x8b, 0x06, 0xbc, 0x58, 0xc4, 0x75, 0x51, 0x0b, 0xed, 0x35, 0xd4, 0x8f, 0x3c, 0x62, 0x52,
	0x62, 0x90, 0x8f, 0x53, 0xe2, 0x53, 0xf4, 0x18, 0xd6, 0xc5, 0x84, 0x59, 0x2e, 0xd5, 0xfd, 0x6d,
	0x3d, 0x6d, 0xfc, 0xba, 0x98, 0x8b, 0x21, 0xd1, 0x5a, 0x1b, 0x1a, 0xd2, 0x93, 0x3f, 0x71, 0xc7,
	0x61, 0x95, 0xe1, 0xc8, 0xb4, 0x6d, 0xa8, 0x1a, 0xc4, 0xc4, 0x32, 0x52, 0x52, 0xdd, 0x83, 0x1a,
	0x57, 0x0b, 0xf3, 0x5b, 0x64, 0x02, 0x3d, 0x42, 0x65, 0x18, 0xb9, 0x28, 0xca, 0x7c, 0x51, 0xb4,
	0x57, 0x50, 0x65, 0x88, 0xdb, 0x46, 0xfa, 0xa1, 0x40, 0xbd, 0x3f, 0xc1, 0x91, 0xf6, 0x25, 0xd7,
	0x34, 0xb1, 0x75, 0xb9, 0xc5, 0xad, 0x8b, 0x2d, 0x6d, 0x3e, 0xb1, 0xb4, 0x32, 0xf9, 0x42, 0x64,
	0xcb, 0x93, 0x6b, 0x5a, 0xbc, 0x6e, 0x4d, 0x4b, 0x37, 0x58, 0xd3, 0x3f, 0xa0, 0x21, 0x0b, 0xe2,
	0xcd, 0xd1, 0xfe, 0x81, 0xfa, 0x31, 0xb9, 0x24, 0x99, 0x25, 0x06, 0x26, 0x12, 0x20, 0x4c, 0xbe,
	0x28, 0x50, 0x3f, 0x63, 0x97, 0x5d, 0xda, 0x34, 0xa1, 0xc8, 0x73, 0x09, 0xcc, 0xea, 0x06, 0x3f,
	0x04, 0x6b, 0xef, 0x9e, 0x9f, 0x07, 0x6d, 0xcf, 0x31, 0xb1, 0x38, 0x2d, 0x6f, 0x49, 0xa2, 0xa3,
	0x85, 0xc5, 0x8e, 0xca, 0xa6, 0x15, 0x23, 0x13, 0xff, 0x0c, 0x0d, 0x99, 0x91, 0x18, 0xfa, 0x53,
	0x28, 0x8b, 0x31, 0xfa, 0x2d, 0xa5, 0x9d, 0xbf, 0x7e, 0xea, 0x21, 0x1c, 0x3d, 0x84, 0x42, 0xc0,
	0x62, 0x2c, 0xeb, 0x05, 0xb3, 0x08, 0xcb, 0xbd, 0x21, 0xd4, 0x34, 0x18, 0x54, 0xfb, 0x00, 0xe8,
	0x10, 0x63, 0x49, 0x00, 0x59, 0xdb, 0x32, 0xe7, 0x81, 0x5c, 0x8c, 0x07, 0x9a, 0x50, 0x64, 0x97,
	0x9d, 0x35, 0xa3, 0x66, 0xf0, 0x03, 0x6b, 0x1f, 0xbb, 0xd1, 0xac, 0x09, 0x35, 0x43, 0x9c, 0xb4,
	0x4d, 0xd8, 0x88, 0xc5, 0x12, 0x53, 0xf9, 0x1f, 0x36, 0x7a, 0x84, 0x4a, 0xb1, 0x9f, 0x35, 0xce,
	0x3e, 0x34, 0xe3, 0x30, 0xd1, 0xaf, 0xe7, 0x00, 0x94, 0xf8, 0x74, 0x60, 0x05, 0x52, 0xd1, 0xb1,
	0x9d, 0xf4, 0x8e, 0x85, 0xa1, 0x2b, 0x54, 0xba, 0xd1, 0x9e, 0x01, 0x8a, 0xb8, 0xbd, 0x61, 0x03,
	0x34, 0x23, 0x96, 0x7b, 0x98, 0xd3, 0x01, 0x54, 0xc2, 0x9c, 0xc4, 0xd5, 0xbd, 0x2e, 0xa5, 0xb2,
	0x4c, 0x49, 0x73, 0x60, 0x93, 0xaf, 0xfa, 0xef, 0x99, 0x4a, 0x0b, 0xb6, 0x92, 0xe1, 0xc4, 0x60,
	0x5e, 0xc0, 0xa6, 0x41, 0x1c, 0x77, 0xf6, 0xab, 0x89, 0x04, 0xae, 0x93, 0x0e, 0xb8, 0xeb, 0xfd,
	0x6f, 0x65, 0x68, 0x88, 0xfd, 0x3d, 0x23, 0xde, 0xcc, 0xb6, 0x08, 0xea, 0x43, 0x89, 0xf3, 0x34,
	0xfa, 0x37, 0xbd, 0x55, 0xb1, 0xef, 0x81, 0xfa, 0xdf, 0x72, 0x90, 0x28, 0x61, 0x0d, 0xbd, 0x85,
	0x42, 0xc0, 0xde, 0x68, 0x37, 0x1d, 0x1f, 0x21, 0x7e, 0x55, 0x5b, 0x06, 0x09, 0x1d, 0x9e, 0x42,
	0xbe, 0x47, 0x28, 0x6a, 0xa7, 0x83, 0xe7, 0x04, 0xaf, 0xee, 0x2e, 0x41, 0x84, 0xde, 0xfa, 0x50,
	0xe2, 0xdd, 0xcf, 0xaa, 0x3a, 0x46, 0xe3, 0x59, 0x55, 0x27, 0xa8, 0x91, 0xb9, 0xe5, 0xdc, 0x97,
	0xe5, 0x36, 0x46, 0x9d, 0x59, 0x6e, 0x13, 0xf4, 0xc9, 0xdc, 0x72, 0xb6, 0xca, 0x72, 0x1b, 0x63,
	0xd7, 0x2c, 0xb7, 0x71, 0xc2, 0xd3, 0xd6, 0x10, 0x86, 0x6a, 0x84, 0x18, 0x50, 0x27, 0xdd, 0x6c,
	0x91, 0xa7, 0xd4, 0xbd, 0x15, 0x90, 0x61, 0x94, 0x11, 0xd4, 0xa2, 0x04, 0x82, 0xf6, 0x32, 0xe7,
	0x93, 0xe4, 0x22, 0xf5, 0xce, 0x2a, 0xd0, 0x68, 0x39, 0x11, 0x4d, 0x56, 0x39, 0x8b, 0xac, 0xa3,
	0xee, 0xad, 0x80, 0x0c, 0xa3, 0x38, 0xf2, 0x8b, 0x18, 0x06, 0xba, 0xbb, 0x6c, 0x39, 0x92, 0xb1,
	0xee, 0xad, 0x06, 0x8e, 0x86, 0x8b, 0xdf, 0xe5, 0xac, 0x70, 0xa9, 0x94, 0x91, 0x15, 0x2e, 0x9d,
	0x1e, 0xb4, 0xb5, 0x97, 0x95, 0xf7, 0xf2, 0x67, 0x66, 0x58, 0x62, 0x3f, 0x06, 0x8f, 0x7e, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xa0, 0x2a, 0xd8, 0x36, 0x2c, 0x0c, 0x00, 0x00,
}
